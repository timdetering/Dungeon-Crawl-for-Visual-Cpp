// This file has been automatically generated.

#include "tiledef-icons.h"

#include <string>
#include <cstring>
#include <cassert>
using namespace std;

static unsigned int _tile_icons_count[TILEI_ICONS_MAX - 0] =
{
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
};

unsigned int tile_icons_count(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILEI_ICONS_MAX);
    return _tile_icons_count[idx - 0];
}

static tileidx_t _tile_icons_basetiles[TILEI_ICONS_MAX - 0] =
{
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    86,
    86,
    86,
    86,
    86,
    86,
    86,
    94,
    94,
    94,
    94,
    94,
    94,
    94,
    94,
};

tileidx_t tile_icons_basetile(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILEI_ICONS_MAX);
    return _tile_icons_basetiles[idx - 0] + 0;
}

static int _tile_icons_probs[TILEI_ICONS_MAX - 0] =
{
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
};

int tile_icons_probs(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILEI_ICONS_MAX);
    return _tile_icons_probs[idx - 0];
}

static const char *_tile_icons_name[TILEI_ICONS_MAX - 0] =
{
    "ICONS_FILLER_0",
    "TRAP_NET",
    "MASK_DEEP_WATER",
    "MASK_SHALLOW_WATER",
    "MASK_DEEP_WATER_MURKY",
    "MASK_SHALLOW_WATER_MURKY",
    "MASK_DEEP_WATER_SHOALS",
    "MASK_SHALLOW_WATER_SHOALS",
    "MASK_LAVA",
    "CURSOR",
    "CURSOR2",
    "CURSOR3",
    "TUTORIAL_CURSOR",
    "HEART",
    "GOOD_NEUTRAL",
    "NEUTRAL",
    "ANIMATED_WEAPON",
    "MIMIC",
    "INEPT_MIMIC",
    "RAVENOUS_MIMIC",
    "POISON",
    "STICKY_FLAME",
    "INNER_FLAME",
    "CONSTRICTED",
    "BERSERK",
    "GLOWING",
    "SLOWED",
    "HASTED",
    "MIGHT",
    "PETRIFYING",
    "PETRIFIED",
    "BLIND",
    "FLEEING",
    "MAY_STAB_BRAND",
    "STAB_BRAND",
    "PAIN_MIRROR",
    "SOMETHING_UNDER",
    "TRIED",
    "NEW_STAIR",
    "MESH",
    "OOR_MESH",
    "MAGIC_MAP_MESH",
    "TRAVEL_EXCLUSION_FG",
    "TRAVEL_EXCLUSION_CENTRE_FG",
    "NUM0",
    "NUM1",
    "NUM2",
    "NUM3",
    "NUM4",
    "NUM5",
    "NUM6",
    "NUM7",
    "NUM8",
    "NUM9",
    "NUM0_OUTLINE",
    "NUM1_OUTLINE",
    "NUM2_OUTLINE",
    "NUM3_OUTLINE",
    "NUM4_OUTLINE",
    "NUM5_OUTLINE",
    "NUM6_OUTLINE",
    "NUM7_OUTLINE",
    "NUM8_OUTLINE",
    "NUM9_OUTLINE",
    "NUM_MINUS5",
    "NUM_MINUS4",
    "NUM_MINUS3",
    "NUM_MINUS2",
    "NUM_MINUS1",
    "NUM_ZERO",
    "NUM_PLUS1",
    "NUM_PLUS2",
    "NUM_PLUS3",
    "NUM_PLUS4",
    "NUM_PLUS5",
    "DEMON_NUM1",
    "DEMON_NUM2",
    "DEMON_NUM3",
    "DEMON_NUM4",
    "DEMON_NUM5",
    "ITEM_SLOT_SELECTED",
    "MDAM_LIGHTLY_DAMAGED",
    "MDAM_MODERATELY_DAMAGED",
    "MDAM_HEAVILY_DAMAGED",
    "MDAM_SEVERELY_DAMAGED",
    "MDAM_ALMOST_DEAD",
    "TRAVEL_PATH_FROM",
    "TRAVEL_PATH_FROM_1",
    "TRAVEL_PATH_FROM_2",
    "TRAVEL_PATH_FROM_3",
    "TRAVEL_PATH_FROM_4",
    "TRAVEL_PATH_FROM_5",
    "TRAVEL_PATH_FROM_6",
    "TRAVEL_PATH_FROM_7",
    "TRAVEL_PATH_TO",
    "TRAVEL_PATH_TO_1",
    "TRAVEL_PATH_TO_2",
    "TRAVEL_PATH_TO_3",
    "TRAVEL_PATH_TO_4",
    "TRAVEL_PATH_TO_5",
    "TRAVEL_PATH_TO_6",
    "TRAVEL_PATH_TO_7",
};

const char *tile_icons_name(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILEI_ICONS_MAX);
    return _tile_icons_name[idx - 0];
}

static tile_info _tile_icons_info[TILEI_ICONS_MAX - 0] =
{
    tile_info(32, 32, 0, 0, 0, 0, 32, 32),
    tile_info(32, 32, 1, 1, 32, 0, 62, 30),
    tile_info(32, 32, 0, 16, 62, 0, 94, 16),
    tile_info(32, 32, 0, 16, 94, 0, 126, 16),
    tile_info(32, 32, 0, 16, 126, 0, 158, 16),
    tile_info(32, 32, 0, 16, 158, 0, 190, 16),
    tile_info(32, 32, 0, 16, 190, 0, 222, 16),
    tile_info(32, 32, 0, 16, 222, 0, 254, 16),
    tile_info(32, 32, 0, 16, 254, 0, 286, 16),
    tile_info(32, 32, 0, 0, 286, 0, 318, 32),
    tile_info(32, 32, 0, 0, 318, 0, 350, 32),
    tile_info(32, 32, 0, 0, 350, 0, 382, 32),
    tile_info(32, 32, 0, 0, 382, 0, 414, 32),
    tile_info(32, 32, 21, 1, 414, 0, 425, 9),
    tile_info(32, 32, 24, 1, 414, 9, 422, 18),
    tile_info(32, 32, 24, 1, 414, 18, 422, 27),
    tile_info(32, 32, 1, 0, 425, 0, 434, 13),
    tile_info(32, 32, 7, 12, 434, 0, 453, 19),
    tile_info(32, 32, 7, 13, 453, 0, 472, 16),
    tile_info(32, 32, 0, 7, 472, 0, 504, 25),
    tile_info(32, 32, 26, 0, 504, 0, 510, 11),
    tile_info(32, 32, 25, 0, 504, 11, 511, 22),
    tile_info(32, 32, 24, 0, 511, 0, 519, 11),
    tile_info(32, 32, 20, 1, 511, 11, 523, 20),
    tile_info(32, 32, 18, 21, 511, 20, 525, 31),
    tile_info(32, 32, 24, 0, 525, 0, 533, 11),
    tile_info(32, 32, 25, 0, 525, 11, 532, 22),
    tile_info(32, 32, 25, 0, 533, 0, 540, 11),
    tile_info(32, 32, 25, 0, 533, 11, 540, 22),
    tile_info(32, 32, 25, 0, 540, 0, 547, 11),
    tile_info(32, 32, 25, 0, 540, 11, 547, 22),
    tile_info(32, 32, 21, 2, 540, 22, 551, 29),
    tile_info(32, 32, 28, 0, 551, 0, 555, 12),
    tile_info(32, 32, 24, 0, 551, 12, 559, 24),
    tile_info(32, 32, 19, 0, 559, 0, 572, 11),
    tile_info(32, 32, 24, 0, 559, 11, 567, 22),
    tile_info(32, 32, 0, 23, 559, 22, 575, 31),
    tile_info(8, 16, 0, 2, 575, 0, 582, 12),
    tile_info(32, 32, 23, 1, 575, 12, 584, 21),
    tile_info(32, 32, 0, 0, 584, 0, 616, 32),
    tile_info(32, 32, 0, 0, 616, 0, 648, 32),
    tile_info(32, 32, 0, 0, 648, 0, 680, 32),
    tile_info(32, 32, 0, 0, 680, 0, 712, 32),
    tile_info(32, 32, 0, 0, 712, 0, 744, 32),
    tile_info(8, 16, 1, 2, 744, 0, 751, 12),
    tile_info(8, 16, 2, 2, 744, 12, 748, 24),
    tile_info(8, 16, 1, 2, 751, 0, 758, 12),
    tile_info(8, 16, 1, 2, 751, 12, 758, 24),
    tile_info(8, 16, 0, 2, 758, 0, 766, 12),
    tile_info(8, 16, 1, 2, 758, 12, 765, 24),
    tile_info(8, 16, 1, 2, 766, 0, 773, 12),
    tile_info(8, 16, 1, 2, 766, 12, 773, 24),
    tile_info(8, 16, 1, 2, 773, 0, 780, 12),
    tile_info(8, 16, 1, 2, 773, 12, 780, 24),
    tile_info(8, 16, 0, 1, 780, 0, 788, 13),
    tile_info(8, 16, 1, 1, 780, 13, 785, 26),
    tile_info(8, 16, 0, 1, 788, 0, 796, 13),
    tile_info(8, 16, 0, 1, 788, 13, 796, 26),
    tile_info(8, 16, 0, 1, 796, 0, 804, 13),
    tile_info(8, 16, 0, 1, 796, 13, 804, 26),
    tile_info(8, 16, 0, 1, 804, 0, 812, 13),
    tile_info(8, 16, 0, 1, 804, 13, 812, 26),
    tile_info(8, 16, 0, 1, 812, 0, 820, 13),
    tile_info(8, 16, 0, 1, 812, 13, 820, 26),
    tile_info(32, 32, 18, 18, 820, 0, 833, 13),
    tile_info(32, 32, 18, 18, 820, 13, 833, 26),
    tile_info(32, 32, 18, 18, 833, 0, 846, 13),
    tile_info(32, 32, 18, 18, 833, 13, 846, 26),
    tile_info(32, 32, 21, 18, 846, 0, 856, 13),
    tile_info(32, 32, 23, 18, 846, 13, 854, 26),
    tile_info(32, 32, 22, 18, 856, 0, 865, 13),
    tile_info(32, 32, 19, 18, 856, 13, 868, 26),
    tile_info(32, 32, 19, 18, 868, 0, 880, 13),
    tile_info(32, 32, 18, 18, 868, 13, 881, 26),
    tile_info(32, 32, 18, 18, 881, 0, 894, 13),
    tile_info(32, 32, 0, 20, 881, 13, 894, 25),
    tile_info(32, 32, 0, 20, 894, 0, 907, 12),
    tile_info(32, 32, 0, 20, 894, 12, 907, 24),
    tile_info(32, 32, 0, 20, 907, 0, 920, 12),
    tile_info(32, 32, 0, 20, 907, 12, 920, 24),
    tile_info(32, 32, 0, 0, 920, 0, 952, 32),
    tile_info(32, 32, 0, 30, 952, 0, 984, 2),
    tile_info(32, 32, 0, 30, 952, 2, 984, 4),
    tile_info(32, 32, 0, 30, 952, 4, 984, 6),
    tile_info(32, 32, 0, 30, 952, 6, 984, 8),
    tile_info(32, 32, 0, 30, 952, 8, 984, 10),
    tile_info(32, 32, 12, 0, 952, 10, 960, 26),
    tile_info(32, 32, 16, 2, 984, 0, 1000, 12),
    tile_info(32, 32, 16, 12, 984, 12, 1000, 20),
    tile_info(32, 32, 18, 16, 1000, 0, 1012, 16),
    tile_info(32, 32, 12, 16, 1012, 0, 1020, 16),
    tile_info(32, 32, 0, 18, 0, 32, 16, 44),
    tile_info(32, 32, 0, 12, 16, 32, 32, 40),
    tile_info(32, 32, 2, 0, 32, 32, 44, 48),
    tile_info(32, 32, 12, 0, 44, 32, 52, 48),
    tile_info(32, 32, 16, 2, 52, 32, 68, 44),
    tile_info(32, 32, 16, 12, 68, 32, 84, 40),
    tile_info(32, 32, 18, 16, 84, 32, 96, 48),
    tile_info(32, 32, 12, 16, 96, 32, 104, 48),
    tile_info(32, 32, 0, 18, 104, 32, 120, 44),
    tile_info(32, 32, 0, 12, 120, 32, 136, 40),
    tile_info(32, 32, 2, 0, 136, 32, 148, 48),
};

tile_info &tile_icons_info(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILEI_ICONS_MAX);
    return _tile_icons_info[idx - 0];
}


typedef pair<const char*, tileidx_t> _name_pair;

static _name_pair icons_name_pairs[] =
{
    _name_pair("animated_weapon", 16 + 0),
    _name_pair("berserk", 24 + 0),
    _name_pair("blind", 31 + 0),
    _name_pair("constricted", 23 + 0),
    _name_pair("cursor", 9 + 0),
    _name_pair("cursor2", 10 + 0),
    _name_pair("cursor3", 11 + 0),
    _name_pair("demon_num1", 75 + 0),
    _name_pair("demon_num2", 76 + 0),
    _name_pair("demon_num3", 77 + 0),
    _name_pair("demon_num4", 78 + 0),
    _name_pair("demon_num5", 79 + 0),
    _name_pair("fleeing", 32 + 0),
    _name_pair("glowing", 25 + 0),
    _name_pair("good_neutral", 14 + 0),
    _name_pair("hasted", 27 + 0),
    _name_pair("heart", 13 + 0),
    _name_pair("inept_mimic", 18 + 0),
    _name_pair("inner_flame", 22 + 0),
    _name_pair("item_slot_selected", 80 + 0),
    _name_pair("magic_map_mesh", 41 + 0),
    _name_pair("mask_deep_water", 2 + 0),
    _name_pair("mask_deep_water_murky", 4 + 0),
    _name_pair("mask_deep_water_shoals", 6 + 0),
    _name_pair("mask_lava", 8 + 0),
    _name_pair("mask_shallow_water", 3 + 0),
    _name_pair("mask_shallow_water_murky", 5 + 0),
    _name_pair("mask_shallow_water_shoals", 7 + 0),
    _name_pair("may_stab_brand", 33 + 0),
    _name_pair("mdam_almost_dead", 85 + 0),
    _name_pair("mdam_heavily_damaged", 83 + 0),
    _name_pair("mdam_lightly_damaged", 81 + 0),
    _name_pair("mdam_moderately_damaged", 82 + 0),
    _name_pair("mdam_severely_damaged", 84 + 0),
    _name_pair("mesh", 39 + 0),
    _name_pair("might", 28 + 0),
    _name_pair("mimic", 17 + 0),
    _name_pair("neutral", 15 + 0),
    _name_pair("new_stair", 38 + 0),
    _name_pair("num0", 44 + 0),
    _name_pair("num0_outline", 54 + 0),
    _name_pair("num1", 45 + 0),
    _name_pair("num1_outline", 55 + 0),
    _name_pair("num2", 46 + 0),
    _name_pair("num2_outline", 56 + 0),
    _name_pair("num3", 47 + 0),
    _name_pair("num3_outline", 57 + 0),
    _name_pair("num4", 48 + 0),
    _name_pair("num4_outline", 58 + 0),
    _name_pair("num5", 49 + 0),
    _name_pair("num5_outline", 59 + 0),
    _name_pair("num6", 50 + 0),
    _name_pair("num6_outline", 60 + 0),
    _name_pair("num7", 51 + 0),
    _name_pair("num7_outline", 61 + 0),
    _name_pair("num8", 52 + 0),
    _name_pair("num8_outline", 62 + 0),
    _name_pair("num9", 53 + 0),
    _name_pair("num9_outline", 63 + 0),
    _name_pair("num_minus1", 68 + 0),
    _name_pair("num_minus2", 67 + 0),
    _name_pair("num_minus3", 66 + 0),
    _name_pair("num_minus4", 65 + 0),
    _name_pair("num_minus5", 64 + 0),
    _name_pair("num_plus1", 70 + 0),
    _name_pair("num_plus2", 71 + 0),
    _name_pair("num_plus3", 72 + 0),
    _name_pair("num_plus4", 73 + 0),
    _name_pair("num_plus5", 74 + 0),
    _name_pair("num_zero", 69 + 0),
    _name_pair("oor_mesh", 40 + 0),
    _name_pair("pain_mirror", 35 + 0),
    _name_pair("petrified", 30 + 0),
    _name_pair("petrifying", 29 + 0),
    _name_pair("poison", 20 + 0),
    _name_pair("ravenous_mimic", 19 + 0),
    _name_pair("slowed", 26 + 0),
    _name_pair("something_under", 36 + 0),
    _name_pair("stab_brand", 34 + 0),
    _name_pair("sticky_flame", 21 + 0),
    _name_pair("trap_net", 1 + 0),
    _name_pair("travel_exclusion_centre_fg", 43 + 0),
    _name_pair("travel_exclusion_fg", 42 + 0),
    _name_pair("travel_path_from", 86 + 0),
    _name_pair("travel_path_to", 94 + 0),
    _name_pair("tried", 37 + 0),
    _name_pair("tutorial_cursor", 12 + 0),
};

bool tile_icons_index(const char *str, tileidx_t *idx)
{
    assert(str);
    if (!str)
        return false;

    string lc = str;
    for (unsigned int i = 0; i < lc.size(); i++)
        lc[i] = tolower(lc[i]);

    int num_pairs = sizeof(icons_name_pairs) / sizeof(icons_name_pairs[0]);
    bool result = binary_search<const char *, tileidx_t>(
       lc.c_str(), &icons_name_pairs[0], num_pairs, &strcmp, idx);
    return (result);
}

bool tile_icons_equal(tileidx_t tile, tileidx_t idx)
{
    assert(tile >= 0 && tile < TILEI_ICONS_MAX);
    return (idx >= tile && idx < tile + tile_icons_count(tile));
}


typedef pair<tile_variation, tileidx_t> _colour_pair;

static _colour_pair icons_colour_pairs[] =
{
    _colour_pair(tile_variation(0, 0), 0),
};

tileidx_t tile_icons_coloured(tileidx_t idx, int col)
{
    int num_pairs = sizeof(icons_colour_pairs) / sizeof(icons_colour_pairs[0]);
    tile_variation key(idx, col);
    tileidx_t found;
    bool result = binary_search<tile_variation, tileidx_t>(
       key, &icons_colour_pairs[0], num_pairs,
       &tile_variation::cmp, &found);
    return (result ? found : idx);
}

